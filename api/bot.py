import json
import requests
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8475765506:AAFENFMSv1Zp9QYMgVnmFonk8I2RJTDQErE')
BOT_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

def send_message(chat_id, text, parse_mode='HTML', reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    url = f"{BOT_API_URL}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': parse_mode
    }
    
    if reply_markup:
        data['reply_markup'] = reply_markup
    
    try:
        response = requests.post(url, json=data, timeout=10)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None
        data['reply_markup'] = reply_markup
    
    try:
        response = requests.post(url, json=data, timeout=10)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def create_main_keyboard(base_url):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π PixelStars"""
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üéÆ PixelStars Casino",
                    "url": base_url
                }
            ],
            [
                {
                    "text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    "callback_data": "stats"
                },
                {
                    "text": "üéÅ –ë–æ–Ω—É—Å—ã",
                    "callback_data": "bonuses"
                }
            ],
            [
                {
                    "text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                    "callback_data": "help"
                }
            ]
        ]
    }
    return keyboard

def create_games_keyboard(base_url):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–≥—Ä–∞–º–∏"""
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üöÄ –ò–≥—Ä–∞—Ç—å –≤ Crash",
                    "url": base_url
                }
            ],
            [
                {
                    "text": "üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã",
                    "url": base_url
                }
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback_data": "back_to_main"
                }
            ]
        ]
    }
    return keyboard

def process_message(message, base_url):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id = message['chat']['id']
    text = message.get('text', '')
    user = message.get('from', {})
    
    first_name = user.get('first_name', '–ò–≥—Ä–æ–∫')
    username = user.get('username', '')
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {first_name} (@{username}): {text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if text == '/start':
        welcome_message = f"""üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pixelstars Casino!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

üé∞ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:</b>
‚Ä¢ üöÄ Crash - –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–æ 100x
‚Ä¢ üéÅ –ö–µ–π—Å—ã —Å –ø—Ä–∏–∑–∞–º–∏
‚Ä¢ ‚≠ê –°–∏—Å—Ç–µ–º–∞ –∑–≤–µ–∑–¥

üéØ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üéÆ PixelStars Casino"
2. –ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å–Ω—ã–µ –∑–≤–µ–∑–¥—ã
3. –ò–≥—Ä–∞–π –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π!

üíé <b>–ë–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:</b>
1000 ‚≠ê –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ!"""
        
        keyboard = create_main_keyboard(base_url)
        send_message(chat_id, welcome_message, reply_markup=keyboard)
        
    elif text == '/help':
        help_message = """üìã <b>–ü–æ–º–æ—â—å –ø–æ Pixelstars Casino</b>

üéÆ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/games - –°–ø–∏—Å–æ–∫ –∏–≥—Ä

üöÄ <b>Crash Game:</b>
‚Ä¢ –î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É
‚Ä¢ –ó–∞–±–∏—Ä–∞–π –Ω–∞ –Ω—É–∂–Ω–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ
‚Ä¢ –ù–µ –¥–∞–π –∑–≤–µ–∑–¥–µ —É–ø–∞—Å—Ç—å!

üéÅ <b>–ö–µ–π—Å—ã:</b>
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –∑–∞ –∑–≤–µ–∑–¥—ã
‚Ä¢ –ü–æ–ª—É—á–∞–π —Ä–µ–¥–∫–∏–µ –ø—Ä–∏–∑—ã
‚Ä¢ –°–æ–±–∏—Ä–∞–π –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        
        send_message(chat_id, help_message)
        
    elif text == '/balance':
        balance_message = f"""üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

üë§ –ò–≥—Ä–æ–∫: {first_name}
‚≠ê –ó–≤–µ–∑–¥—ã: 1000 (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å)
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: 0
üíé –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: 0

üéØ –ò–≥—Ä–∞–π—Ç–µ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å!
üåê –ò–≥—Ä–∞—Ç—å: {base_url}"""
        
        send_message(chat_id, balance_message)
        
    elif text == '/games':
        games_message = """üéÆ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã</b>

üöÄ <b>Crash Game</b>
–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–æ 100x! –ì–ª–∞–≤–Ω–æ–µ - –≤–æ–≤—Ä–µ–º—è –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à.

üéÅ <b>–ö–µ–π—Å—ã</b>
–û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–∑—ã:
‚Ä¢ –û–±—ã—á–Ω—ã–µ –∫–µ–π—Å—ã
‚Ä¢ –†–µ–¥–∫–∏–µ –∫–µ–π—Å—ã  
‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–µ–π—Å—ã

‚≠ê <b>–ë–æ–Ω—É—Å—ã</b>
–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
        
        keyboard = create_games_keyboard(base_url)
        send_message(chat_id, games_message, reply_markup=keyboard)
        
    elif text == '/menu' or text == '/keyboard':
        menu_message = f"""üéÆ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–ü—Ä–∏–≤–µ—Ç, {first_name}!
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"""
        
        keyboard = create_main_keyboard(base_url)
        send_message(chat_id, menu_message, reply_markup=keyboard)
        
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        default_message = f"""ü§ñ –ü—Ä–∏–≤–µ—Ç, {first_name}!

–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å
/help - –ü–æ–º–æ—â—å
/balance - –ë–∞–ª–∞–Ω—Å
/games - –ò–≥—Ä—ã

üéÆ –î–ª—è –∏–≥—Ä—ã –æ—Ç–∫—Ä–æ–π: {base_url}"""
        
        send_message(chat_id, default_message)

def process_callback_query(callback_query, base_url):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query_id = callback_query['id']
    data = callback_query.get('data', '')
    user = callback_query.get('from', {})
    chat_id = user.get('id')
    message_id = callback_query.get('message', {}).get('message_id')
    
    first_name = user.get('first_name', '–ò–≥—Ä–æ–∫')
    
    print(f"üîò Callback –æ—Ç {first_name}: {data}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
    answer_callback_query(query_id)
    
    if data == 'stats':
        stats_message = f"""üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ –ò–≥—Ä–æ–∫: {first_name}
‚≠ê –ó–≤–µ–∑–¥—ã: 1000 (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å)
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: 0
üíé –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: 0
üöÄ –õ—É—á—à–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: 0x

üéØ –ò–≥—Ä–∞–π—Ç–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"""
        
        keyboard = create_main_keyboard(base_url)
        edit_message(chat_id, message_id, stats_message, keyboard)
        
    elif data == 'bonuses':
        bonuses_message = f"""üéÅ <b>–ë–æ–Ω—É—Å—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã</b>

üíé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã:</b>
‚Ä¢ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å: 1000 ‚≠ê ‚úÖ
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: 100 ‚≠ê
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: 500 ‚≠ê

üéÆ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞: +200 ‚≠ê
‚Ä¢ 10 –∏–≥—Ä –ø–æ–¥—Ä—è–¥: +1000 ‚≠ê
‚Ä¢ –í—ã–∏–≥—Ä—ã—à 10x: +5000 ‚≠ê

üî• –ò–≥—Ä–∞–π—Ç–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ!"""
        
        keyboard = create_main_keyboard(base_url)
        edit_message(chat_id, message_id, bonuses_message, keyboard)
        
    elif data == 'help':
        help_message = """üìã <b>–ü–æ–º–æ—â—å –ø–æ Pixelstars Casino</b>

üéÆ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/games - –°–ø–∏—Å–æ–∫ –∏–≥—Ä

üöÄ <b>Crash Game:</b>
‚Ä¢ –î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É
‚Ä¢ –ó–∞–±–∏—Ä–∞–π –Ω–∞ –Ω—É–∂–Ω–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ
‚Ä¢ –ù–µ –¥–∞–π –∑–≤–µ–∑–¥–µ —É–ø–∞—Å—Ç—å!

üéÅ <b>–ö–µ–π—Å—ã:</b>
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –∑–∞ –∑–≤–µ–∑–¥—ã
‚Ä¢ –ü–æ–ª—É—á–∞–π —Ä–µ–¥–∫–∏–µ –ø—Ä–∏–∑—ã
‚Ä¢ –°–æ–±–∏—Ä–∞–π –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        
        keyboard = create_main_keyboard(base_url)
        edit_message(chat_id, message_id, help_message, keyboard)
        
    elif data == 'back_to_main':
        welcome_message = f"""üéÆ <b>Pixelstars Casino</b>

üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        keyboard = create_main_keyboard(base_url)
        edit_message(chat_id, message_id, welcome_message, keyboard)

def answer_callback_query(query_id, text=""):
    """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query"""
    url = f"{BOT_API_URL}/answerCallbackQuery"
    data = {
        'callback_query_id': query_id,
        'text': text
    }
    
    try:
        response = requests.post(url, json=data, timeout=10)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
        return None

def edit_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url = f"{BOT_API_URL}/editMessageText"
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    if reply_markup:
        data['reply_markup'] = reply_markup
    
    try:
        response = requests.post(url, json=data, timeout=10)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

@app.route('/', methods=['GET'])
def home():
    return jsonify({
        'status': 'ok',
        'message': 'PixelStars Casino Bot API',
        'bot': 'active'
    })

@app.route('/api/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        update = request.get_json()
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {json.dumps(update, indent=2)}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
        host = request.headers.get('Host', 'localhost:8200')
        base_url = f"https://{host}" if 'vercel.app' in host else f"http://{host}"
        
        if 'message' in update:
            process_message(update['message'], base_url)
        elif 'callback_query' in update:
            process_callback_query(update['callback_query'], base_url)
        
        return jsonify({'status': 'ok'})
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/api/send_message', methods=['POST'])
def send_message_api():
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        chat_id = data.get('chat_id')
        text = data.get('text')
        
        if not chat_id or not text:
            return jsonify({'error': 'Missing chat_id or text'})
        
        result = send_message(chat_id, text)
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/status', methods=['GET'])
def status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    url = f"{BOT_API_URL}/getMe"
    try:
        response = requests.get(url, timeout=10)
        bot_info = response.json()
        
        if bot_info.get('ok'):
            bot_data = bot_info['result']
            return jsonify({
                'status': 'active',
                'bot_username': bot_data.get('username'),
                'bot_name': bot_data.get('first_name'),
                'bot_id': bot_data.get('id')
            })
        else:
            return jsonify({'status': 'error', 'message': 'Bot not accessible'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)})

# –î–ª—è Vercel
def handler(request):
    return app(request.environ, lambda status, headers: None)

if __name__ == '__main__':
    app.run(debug=True)