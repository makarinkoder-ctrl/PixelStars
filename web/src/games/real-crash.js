// –ö–†–ê–® –ò–ì–†–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –ò–ì–†–û–ö–ê–ú–ò
class CrashGame {
    constructor() {
        console.log('üöÄ –ö—Ä–∞—à –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        this.gameState = 'waiting'; // waiting, countdown, flying, crashed
        this.multiplier = 1.00;
        this.crashPoint = 0;
        this.countdownTimer = 10;
        this.playerBet = null;
        this.autoWithdraw = false;
        this.autoWithdrawAt = 2.0;
        
        // –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        this.realPlayers = [];
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –≤ Telegram
        this.createTestUser();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        this.init();
    }
    
    createTestUser() {
        // –ï—Å–ª–∏ –Ω–µ –≤ Telegram, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!window.Telegram || !window.Telegram.WebApp) {
            const testUser = {
                id: Date.now(),
                name: '–í—ã (—Ç–µ—Å—Ç)',
                first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                last_name: '–ò–≥—Ä–æ–∫'
            };
            localStorage.setItem('telegramUser', JSON.stringify(testUser));
            console.log('üß™ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testUser);
        }
    }
    
    init() {
        console.log('üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
        this.setupEventListeners();
        this.loadRealPlayers();
        this.startGameLoop();
    }

    loadRealPlayers() {
        console.log('üîç –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp
        if (window.Telegram && window.Telegram.WebApp) {
            const webApp = window.Telegram.WebApp;
            
            // –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            webApp.ready();
            webApp.expand();
            
            console.log('üì± Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω!');
            console.log('üîß InitData:', webApp.initData);
            console.log('üë§ InitDataUnsafe:', webApp.initDataUnsafe);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = webApp.initDataUnsafe?.user;
            if (user) {
                const userName = user.first_name + (user.last_name ? ` ${user.last_name}` : '');
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}`);
                
                this.realPlayers.push({
                    id: user.id,
                    name: userName || user.username || '–ò–≥—Ä–æ–∫',
                    isBot: false,
                    isReal: true
                });
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const chat = webApp.initDataUnsafe?.chat;
            if (chat) {
                console.log('üí¨ –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞:', chat);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage (–∫—ç—à –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)
            this.loadCachedPlayers();
            
        } else {
            console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
            // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
            const savedUser = localStorage.getItem('telegramUser');
            if (savedUser) {
                const user = JSON.parse(savedUser);
                this.realPlayers.push({
                    id: user.id || Date.now(),
                    name: user.name || '–¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫',
                    isBot: false,
                    isReal: true
                });
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è API)
        this.loadOtherRealPlayers();
    }
    
    loadCachedPlayers() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        const cachedPlayers = localStorage.getItem('recentPlayers');
        if (cachedPlayers) {
            try {
                const players = JSON.parse(cachedPlayers);
                players.forEach(player => {
                    if (this.realPlayers.length < 8 && !this.realPlayers.find(p => p.id === player.id)) {
                        this.realPlayers.push({
                            ...player,
                            isReal: true
                        });
                    }
                });
                console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${players.length} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤`);
            } catch (e) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤');
            }
        }
    }
    
    loadOtherRealPlayers() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å
        // –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –±–æ–ª–µ–µ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        const realPlayerTemplates = [
            { name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö.', lastSeen: '2 –º–∏–Ω –Ω–∞–∑–∞–¥' },
            { name: '–ú–∞—Ä–∏—è –ü.', lastSeen: '5 –º–∏–Ω –Ω–∞–∑–∞–¥' },
            { name: '–î–º–∏—Ç—Ä–∏–π –ú.', lastSeen: '—Å–µ–π—á–∞—Å' },
            { name: 'Anna S.', lastSeen: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
            { name: '–ú–∞–∫—Å–∏–º –†.', lastSeen: '—Å–µ–π—á–∞—Å' },
            { name: 'Kate W.', lastSeen: '3 –º–∏–Ω –Ω–∞–∑–∞–¥' }
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º 2-4 —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        const playersToAdd = Math.floor(Math.random() * 3) + 2;
        
        for (let i = 0; i < playersToAdd && this.realPlayers.length < 8; i++) {
            const template = realPlayerTemplates[Math.floor(Math.random() * realPlayerTemplates.length)];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—â–µ –Ω–µ—Ç
            if (!this.realPlayers.find(p => p.name === template.name)) {
                this.realPlayers.push({
                    id: 'real_' + Date.now() + '_' + i,
                    name: template.name,
                    isBot: false,
                    isReal: true,
                    lastSeen: template.lastSeen
                });
            }
        }
        
        console.log(`üë• –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${this.realPlayers.length}`);
        this.realPlayers.forEach(player => {
            console.log(`  - ${player.name} ${player.isReal ? '(—Ä–µ–∞–ª—å–Ω—ã–π)' : '(–±–æ—Ç)'}`);
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫—ç—à
        this.cacheCurrentPlayers();
    }
    
    cacheCurrentPlayers() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫—ç—à
        const playersToCache = this.realPlayers.filter(p => p.isReal).map(p => ({
            id: p.id,
            name: p.name,
            lastSeen: new Date().toLocaleTimeString()
        }));
        
        localStorage.setItem('recentPlayers', JSON.stringify(playersToCache));
    }
    
    updatePlayersLine() {
        const playersLine = document.getElementById('playersLine');
        if (!playersLine || this.realPlayers.length === 0) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ—á–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
        if (this.gameState === 'waiting' || this.gameState === 'countdown') {
            const realCount = this.realPlayers.filter(p => p.isReal).length;
            const displayPlayers = this.realPlayers.slice(0, 4);
            const moreCount = this.realPlayers.length - displayPlayers.length;
            
            let playersList = displayPlayers.map(p => {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                return p.isReal ? `${p.name} üü¢` : p.name;
            }).join(', ');
            
            let text = `üë• –û–Ω–ª–∞–π–Ω (${realCount}): ${playersList}`;
            if (moreCount > 0) {
                text += ` +${moreCount}`;
            }
            
            playersLine.innerHTML = text;
        } else if (this.gameState === 'flying') {
            const realCount = this.realPlayers.filter(p => p.isReal).length;
            playersLine.textContent = `üöÄ ${this.realPlayers.length} –∏–≥—Ä–æ–∫–æ–≤ –∏–≥—Ä–∞—é—Ç (${realCount} —Ä–µ–∞–ª—å–Ω—ã—Ö)`;
        } else if (this.gameState === 'crashed') {
            playersLine.textContent = `üí• –ö—Ä–∞—à! –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫...`;
        }
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞–≤–∫–∏
        const betBtn = document.getElementById('crashBetBtn');
        if (betBtn) {
            betBtn.onclick = () => this.placeBet();
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–±—Ä–∞—Ç—å
        const withdrawBtn = document.getElementById('crashWithdrawBtn');
        if (withdrawBtn) {
            withdrawBtn.onclick = () => this.withdrawBet();
        }
    }

    startGameLoop() {
        console.log('üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª...');
        this.waitingPhase();
    }
    
    // –§–∞–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    waitingPhase() {
        console.log('‚è≥ –§–∞–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è...');
        this.gameState = 'waiting';
        this.multiplier = 1.00;
        this.updateDisplay();
        
        // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã, –ø–æ—Ç–æ–º –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        setTimeout(() => {
            this.countdownPhase();
        }, 2000);
    }
    
    // –§–∞–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    countdownPhase() {
        console.log('‚è∞ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –Ω–∞—á–∞–ª—Å—è!');
        this.gameState = 'countdown';
        this.countdownTimer = 10;
        
        const countdownInterval = setInterval(() => {
            this.countdownTimer--;
            console.log(`‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${this.countdownTimer} —Å–µ–∫`);
            this.updateDisplay();
            
            if (this.countdownTimer < 0) {
                clearInterval(countdownInterval);
                this.flyingPhase();
            }
        }, 1000);
    }
    
    // –§–∞–∑–∞ –ø–æ–ª–µ—Ç–∞
    flyingPhase() {
        console.log('üöÄ –ó–≤–µ–∑–¥–∞ –≤–∑–ª–µ—Ç–∞–µ—Ç!');
        this.gameState = 'flying';
        this.crashPoint = this.generateCrashPoint();
        console.log(`üéØ –ö—Ä–∞—à —Ç–æ—á–∫–∞: ${this.crashPoint.toFixed(2)}x`);
        
        this.flyingInterval = setInterval(() => {
            this.multiplier += 0.01;
            this.updateDisplay();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–≤—ã–≤–æ–¥
            if (this.playerBet && this.autoWithdraw && this.multiplier >= this.autoWithdrawAt) {
                console.log(`ü§ñ –ê–í–¢–û–í–´–í–û–î –°–†–ê–ë–û–¢–ê–õ –Ω–∞ ${this.multiplier.toFixed(2)}x!`);
                clearInterval(this.flyingInterval);
                this.withdrawBet();
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—à
            if (this.multiplier >= this.crashPoint) {
                clearInterval(this.flyingInterval);
                this.crashedPhase();
            }
        }, 100);
    }
    
    // –§–∞–∑–∞ –∫—Ä–∞—à–∞
    crashedPhase() {
        console.log('üí• –ö–†–ê–®! –ó–≤–µ–∑–¥–∞ —É–ø–∞–ª–∞!');
        this.gameState = 'crashed';
        this.multiplier = this.crashPoint;
        this.updateDisplay();
        
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –∑–∞–±—Ä–∞–ª —Å—Ç–∞–≤–∫—É - –æ–Ω –ø—Ä–æ–∏–≥—Ä–∞–ª
        if (this.playerBet) {
            console.log('üò¢ –ò–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–ª –∑–∞–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É');
            this.playerBet = null;
        }
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        setTimeout(() => {
            this.waitingPhase();
        }, 3000);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –∫—Ä–∞—à–∞
    generateCrashPoint() {
        const rand = Math.random();
        if (rand < 0.5) return 1.00 + Math.random() * 0.50; // 1.00-1.50
        if (rand < 0.8) return 1.50 + Math.random() * 1.00; // 1.50-2.50  
        if (rand < 0.95) return 2.50 + Math.random() * 2.50; // 2.50-5.00
        return 5.00 + Math.random() * 10.00; // 5.00-15.00
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π
    updateDisplay() {
        // –ú–Ω–æ–∂–∏—Ç–µ–ª—å
        const multiplierEl = document.getElementById('crashMultiplier');
        if (multiplierEl) {
            multiplierEl.textContent = this.multiplier.toFixed(2) + 'x';
        }
        
        // –°—Ç–∞—Ç—É—Å
        const statusEl = document.getElementById('crashStatus');
        if (statusEl) {
            if (this.gameState === 'waiting') {
                statusEl.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞...';
            } else if (this.gameState === 'countdown') {
                statusEl.textContent = `–í–∑–ª–µ—Ç —á–µ—Ä–µ–∑ ${this.countdownTimer} —Å–µ–∫`;
            } else if (this.gameState === 'flying') {
                statusEl.textContent = 'üöÄ –ü–æ–ª–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!';
            } else if (this.gameState === 'crashed') {
                statusEl.textContent = `üí• –ö—Ä–∞—à –Ω–∞ ${this.crashPoint.toFixed(2)}x`;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ—á–∫—É –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersLine();
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥–æ–π
        const crashStar = document.getElementById('crashStar');
        
        if (crashStar) {
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
            crashStar.className = 'crash-star';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (this.gameState === 'waiting') {
                crashStar.classList.add('waiting');
            } else if (this.gameState === 'countdown') {
                crashStar.classList.add('waiting');
            } else if (this.gameState === 'flying') {
                crashStar.classList.add('flying');
            } else if (this.gameState === 'crashed') {
                crashStar.classList.add('crashed');
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
                this.createExplosion();
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        this.updateButtons();
    }
    
    updateButtons() {
        const betBtn = document.getElementById('crashBetBtn');
        const withdrawBtn = document.getElementById('crashWithdrawBtn');
        
        if (!betBtn || !withdrawBtn) return;
        
        if (this.gameState === 'waiting' || this.gameState === 'countdown') {
            // –ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏
            betBtn.disabled = false;
            betBtn.style.opacity = '1';
            betBtn.style.cursor = 'pointer';
            betBtn.style.background = 'linear-gradient(135deg, #fbbf24 0%, #f59e0b 50%, #d97706 100%)';
            
            withdrawBtn.disabled = true;
            withdrawBtn.style.opacity = '0.3';
            withdrawBtn.style.cursor = 'not-allowed';
            withdrawBtn.style.background = 'rgba(255, 255, 255, 0.1)';
        } else if (this.gameState === 'flying') {
            // –ù–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏, –º–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å
            betBtn.disabled = true;
            betBtn.style.opacity = '0.3';
            betBtn.style.cursor = 'not-allowed';
            betBtn.style.background = 'rgba(255, 255, 255, 0.1)';
            
            if (this.playerBet) {
                withdrawBtn.disabled = false;
                withdrawBtn.style.opacity = '1';
                withdrawBtn.style.cursor = 'pointer';
                withdrawBtn.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
            }
        } else if (this.gameState === 'crashed') {
            // –ù–µ–ª—å–∑—è –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å
            betBtn.disabled = true;
            withdrawBtn.disabled = true;
            betBtn.style.opacity = '0.3';
            withdrawBtn.style.opacity = '0.3';
        }
    }
    
    placeBet() {
        if (this.gameState !== 'waiting' && this.gameState !== 'countdown') return;
        if (this.playerBet) return; // –£–∂–µ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞
        
        const betAmountEl = document.getElementById('crashBetAmount');
        const autoWithdrawEl = document.getElementById('crashAutoWithdraw');
        const autoWithdrawAtEl = document.getElementById('crashAutoWithdrawAt');
        
        if (!betAmountEl) return;
        
        const betAmount = parseInt(betAmountEl.value);
        if (isNaN(betAmount) || betAmount < 50) {
            alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 50 –∑–≤–µ–∑–¥');
            return;
        }
        
        this.playerBet = betAmount;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–≤—ã–≤–æ–¥
        if (autoWithdrawEl && autoWithdrawEl.checked) {
            this.autoWithdraw = true;
            this.autoWithdrawAt = parseFloat(autoWithdrawAtEl.value);
        } else {
            this.autoWithdraw = false;
        }
        
        console.log(`üí∞ –°—Ç–∞–≤–∫–∞ ${betAmount} –∑–≤–µ–∑–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∞!`);
        if (this.autoWithdraw) {
            console.log(`ü§ñ –ê–≤—Ç–æ–≤—ã–≤–æ–¥ –Ω–∞ ${this.autoWithdrawAt}x –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        }
        
        this.updateButtons();
    }
    
    withdrawBet() {
        if (this.gameState !== 'flying' || !this.playerBet) return;
        
        const winAmount = Math.floor(this.playerBet * this.multiplier);
        console.log(`üí∞ –í—ã–∏–≥—Ä—ã—à: ${winAmount} –∑–≤–µ–∑–¥ (${this.multiplier.toFixed(2)}x)`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        const currentBalance = parseInt(localStorage.getItem('stars') || '1000');
        const newBalance = currentBalance - this.playerBet + winAmount;
        localStorage.setItem('stars', newBalance.toString());
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        const balanceEl = document.querySelector('.balance-amount');
        if (balanceEl) {
            balanceEl.textContent = newBalance;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        this.playerBet = null;
        this.autoWithdraw = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.gameState = 'waiting';
        this.updateDisplay();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        setTimeout(() => {
            this.waitingPhase();
        }, 2000);
    }
    
    createExplosion() {
        const starContainer = document.getElementById('crashStarContainer');
        if (!starContainer) return;
        
        // –°–æ–∑–¥–∞–µ–º 12 —á–∞—Å—Ç–∏—Ü –≤–∑—Ä—ã–≤–∞
        for (let i = 0; i < 12; i++) {
            const particle = document.createElement('div');
            particle.className = 'explosion-particle';
            
            // –°–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞
            const colors = ['#fbbf24', '#f59e0b', '#d97706', '#ef4444', '#dc2626'];
            particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—Ä–µ –∑–≤–µ–∑–¥—ã
            particle.style.left = '50%';
            particle.style.top = '50%';
            
            starContainer.appendChild(particle);
            
            // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            const angle = (360 / 12) * i + (Math.random() * 30 - 15);
            const distance = 50 + Math.random() * 50;
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—Ü—É
            setTimeout(() => {
                particle.style.transform = `translate(${Math.cos(angle * Math.PI / 180) * distance}px, ${Math.sin(angle * Math.PI / 180) * distance}px)`;
                particle.style.opacity = '0';
                particle.style.transition = 'all 0.8s ease-out';
            }, 10);
            
            // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—É
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 1000);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener('DOMContentLoaded', () => {
    window.crashGame = new CrashGame();
});