// –ü–†–û–°–¢–ê–Ø –ö–†–ê–® –ò–ì–†–ê –ë–ï–ó –ò–ì–†–û–ö–û–í
class CrashGame {
    constructor() {
        console.log('üöÄ –ö—Ä–∞—à –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        this.gameState = 'waiting'; // waiting, countdown, flying, crashed
        this.multiplier = 1.00;
        this.crashPoint = 0;
        this.countdownTimer = 10;
        this.playerBet = null;
        this.autoWithdraw = false;
        this.autoWithdrawAt = 2.0;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        this.init();
    }
    
    init() {
        console.log('üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
        this.setupEventListeners();
        this.startGameLoop();
    }
    
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞–≤–∫–∏
        const betBtn = document.getElementById('crashBetBtn');
        if (betBtn) {
            betBtn.onclick = () => this.placeBet();
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–±—Ä–∞—Ç—å
        const withdrawBtn = document.getElementById('crashWithdrawBtn');
        if (withdrawBtn) {
            withdrawBtn.onclick = () => this.withdrawBet();
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        this.generatePlayers();
    }
    
    generatePlayers() {
        // –°–æ–∑–¥–∞–µ–º 8-12 —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        const playersCount = Math.floor(Math.random() * 5) + 8;
        this.players = [];
        
        for (let i = 0; i < playersCount; i++) {
            const player = {
                id: Date.now() + Math.random(),
                name: this.playerNames[Math.floor(Math.random() * this.playerNames.length)],
                bet: Math.floor(Math.random() * 2000) + 100, // –æ—Ç 100 –¥–æ 2100
                autoWithdraw: Math.random() < 0.7, // 70% –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∞–≤—Ç–æ–≤—ã–≤–æ–¥
                autoWithdrawAt: Math.round((Math.random() * 4 + 1.5) * 100) / 100, // –æ—Ç 1.5x –¥–æ 5.5x
                cashoutMultiplier: null,
                status: 'betting' // betting, withdrawn, crashed
            };
            this.players.push(player);
        }
        
        this.updatePlayersList();
    }
    
    updatePlayersList() {
        const playersList = document.getElementById('playersList');
        if (!playersList) return;
        
        playersList.innerHTML = '';
        
        this.players.forEach(player => {
            const playerDiv = document.createElement('div');
            playerDiv.style.cssText = `
                background: rgba(255, 255, 255, 0.05);
                border-radius: 12px;
                padding: 12px 16px;
                border: 1px solid rgba(251, 191, 36, 0.2);
                transition: all 0.3s ease;
            `;
            
            let statusText = '';
            let statusColor = 'rgba(255, 255, 255, 0.8)';
            
            if (player.status === 'betting') {
                statusText = `${player.bet} ‚≠ê`;
            } else if (player.status === 'withdrawn') {
                statusText = `+${Math.floor(player.bet * player.cashoutMultiplier)} ‚≠ê`;
                statusColor = '#10b981';
            } else if (player.status === 'crashed') {
                statusText = `-${player.bet} ‚≠ê`;
                statusColor = '#ef4444';
            }
            
            playerDiv.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div style="display: flex; flex-direction: column; gap: 2px;">
                        <div style="color: white; font-weight: 600; font-size: 0.9rem;">
                            ${player.name}
                        </div>
                        ${player.autoWithdraw && player.status === 'betting' ? 
                            `<div style="color: rgba(251, 191, 36, 0.8); font-size: 0.75rem;">
                                –ê–≤—Ç–æ–≤—ã–≤–æ–¥ ${player.autoWithdrawAt}x
                            </div>` : ''
                        }
                    </div>
                    <div style="color: ${statusColor}; font-weight: 700; font-size: 0.85rem;">
                        ${statusText}
                    </div>
                </div>
            `;
            
            playersList.appendChild(playerDiv);
        });
    }
    
    startGameLoop() {
        console.log('ÔøΩ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª...');
        this.waitingPhase();
    }
    
    // –§–∞–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    waitingPhase() {
        console.log('‚è≥ –§–∞–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è...');
        this.gameState = 'waiting';
        this.multiplier = 1.00;
        this.updateDisplay();
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç
        setTimeout(() => {
            this.countdownPhase();
        }, 3000);
    }
    
    // –§–∞–∑–∞ –æ—Ç—Å—á–µ—Ç–∞ –æ—Ç 10 –¥–æ 0
    countdownPhase() {
        console.log('‚è∞ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –æ—Ç 10 –¥–æ 0...');
        this.gameState = 'countdown';
        this.countdownTimer = 10;
        
        const countdownInterval = setInterval(() => {
            this.updateDisplay();
            this.countdownTimer--;
            
            if (this.countdownTimer < 0) {
                clearInterval(countdownInterval);
                this.flyingPhase();
            }
        }, 1000);
    }
    
    // –§–∞–∑–∞ –ø–æ–ª–µ—Ç–∞
    flyingPhase() {
        console.log('üöÄ –ó–≤–µ–∑–¥–∞ –≤–∑–ª–µ—Ç–∞–µ—Ç!');
        this.gameState = 'flying';
        this.crashPoint = this.generateCrashPoint();
        console.log(`üéØ –ö—Ä–∞—à —Ç–æ—á–∫–∞: ${this.crashPoint.toFixed(2)}x`);
        
        this.flyingInterval = setInterval(() => {
            this.multiplier += 0.01;
            this.updateDisplay();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–≤—ã–≤–æ–¥ –∏–≥—Ä–æ–∫–æ–≤
            this.players.forEach(player => {
                if (player.status === 'betting' && player.autoWithdraw && this.multiplier >= player.autoWithdrawAt) {
                    player.status = 'withdrawn';
                    player.cashoutMultiplier = this.multiplier;
                    console.log(`ü§ñ ${player.name} –∞–≤—Ç–æ–≤—ã–≤–æ–¥ –Ω–∞ ${this.multiplier.toFixed(2)}x`);
                }
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–≤—ã–≤–æ–¥ –ü–ï–†–í–´–ú
            if (this.playerBet && this.autoWithdraw && this.multiplier >= this.autoWithdrawAt) {
                console.log(`ü§ñ –ê–í–¢–û–í–´–í–û–î –°–†–ê–ë–û–¢–ê–õ –Ω–∞ ${this.multiplier.toFixed(2)}x!`);
                clearInterval(this.flyingInterval);
                this.withdrawBet();
                return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            this.updatePlayersList();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—à
            if (this.multiplier >= this.crashPoint) {
                clearInterval(this.flyingInterval);
                this.crashedPhase();
            }
        }, 100);
    }
    
    // –§–∞–∑–∞ –∫—Ä–∞—à–∞
    crashedPhase() {
        console.log('üí• –ö–†–ê–®!');
        this.gameState = 'crashed';
        this.multiplier = this.crashPoint;
        this.updateDisplay();
        
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –∑–∞–±—Ä–∞–ª —Å—Ç–∞–≤–∫—É - –æ–Ω –ø—Ä–æ–∏–≥—Ä–∞–ª
        if (this.playerBet) {
            console.log('üò¢ –ò–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–ª –∑–∞–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É');
            this.playerBet = null;
        }
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        setTimeout(() => {
            this.waitingPhase();
        }, 3000);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –∫—Ä–∞—à–∞
    generateCrashPoint() {
        const rand = Math.random();
        if (rand < 0.5) return 1.00 + Math.random() * 0.50; // 1.00-1.50
        if (rand < 0.8) return 1.50 + Math.random() * 1.00; // 1.50-2.50  
        if (rand < 0.95) return 2.50 + Math.random() * 2.50; // 2.50-5.00
        return 5.00 + Math.random() * 10.00; // 5.00-15.00
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π
    updateDisplay() {
        // –ú–Ω–æ–∂–∏—Ç–µ–ª—å
        const multiplierEl = document.getElementById('crashMultiplier');
        if (multiplierEl) {
            multiplierEl.textContent = this.multiplier.toFixed(2) + 'x';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞
            if (this.gameState === 'flying') {
                multiplierEl.classList.add('flying');
                multiplierEl.classList.remove('crashed');
            } else if (this.gameState === 'crashed') {
                multiplierEl.classList.remove('flying');
                multiplierEl.classList.add('crashed');
            } else {
                multiplierEl.classList.remove('flying', 'crashed');
            }
        }
        
        
        // –£–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–≤–µ–∑–¥—ã
        const starEl = document.getElementById('crashStar');
        if (starEl) {
            starEl.classList.remove('flying', 'crashed', 'waiting');
            
            if (this.gameState === 'waiting') {
                starEl.classList.add('waiting');
            } else if (this.gameState === 'flying') {
                starEl.classList.add('flying');
            } else if (this.gameState === 'crashed') {
                starEl.classList.add('crashed');
                this.createExplosion();
            }
        }
        
        // –°—Ç–∞—Ç—É—Å
        const statusEl = document.getElementById('crashStatus');
        if (statusEl) {
            switch (this.gameState) {
                case 'waiting':
                    statusEl.textContent = '–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø–æ–ª–µ—Ç—É...';
                    statusEl.style.color = 'rgba(255, 255, 255, 0.6)';
                    break;
                case 'countdown':
                    statusEl.textContent = `–í–∑–ª–µ—Ç —á–µ—Ä–µ–∑ ${this.countdownTimer} —Å–µ–∫`;
                    statusEl.style.color = '#fbbf24';
                    break;
                case 'flying':
                    statusEl.textContent = 'üöÄ –ü–æ–ª–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!';
                    statusEl.style.color = '#10b981';
                    break;
                case 'crashed':
                    statusEl.textContent = `üí• –ö—Ä–∞—à –Ω–∞ ${this.multiplier.toFixed(2)}x!`;
                    statusEl.style.color = '#ef4444';
                    break;
            }
        }
        
        this.updateButtons();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    updateButtons() {
        const betBtn = document.getElementById('crashBetBtn');
        const withdrawBtn = document.getElementById('crashWithdrawBtn');
        
        if (!betBtn || !withdrawBtn) return;
        
        if (this.gameState === 'waiting' || this.gameState === 'countdown') {
            betBtn.disabled = false;
            betBtn.textContent = '–ü–æ—Å—Ç–∞–≤–∏—Ç—å';
            betBtn.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
            betBtn.style.color = 'white';
            betBtn.style.boxShadow = '0 10px 40px rgba(16, 185, 129, 0.4)';
            betBtn.style.cursor = 'pointer';
            
            withdrawBtn.disabled = true;
            withdrawBtn.textContent = '–ó–∞–±—Ä–∞—Ç—å';
            withdrawBtn.style.background = 'rgba(255, 255, 255, 0.1)';
            withdrawBtn.style.color = 'rgba(255, 255, 255, 0.4)';
            withdrawBtn.style.boxShadow = 'none';
            withdrawBtn.style.cursor = 'not-allowed';
        } else if (this.gameState === 'flying' && this.playerBet) {
            betBtn.disabled = true;
            betBtn.textContent = '–ü–æ—Å—Ç–∞–≤–∏—Ç—å';
            betBtn.style.background = 'rgba(255, 255, 255, 0.1)';
            betBtn.style.color = 'rgba(255, 255, 255, 0.4)';
            betBtn.style.boxShadow = 'none';
            betBtn.style.cursor = 'not-allowed';
            
            withdrawBtn.disabled = false;
            withdrawBtn.textContent = `–ó–∞–±—Ä–∞—Ç—å ${this.multiplier.toFixed(2)}x`;
            withdrawBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)';
            withdrawBtn.style.color = 'white';
            withdrawBtn.style.boxShadow = '0 10px 40px rgba(245, 158, 11, 0.4)';
            withdrawBtn.style.cursor = 'pointer';
        } else {
            betBtn.disabled = true;
            betBtn.style.background = 'rgba(255, 255, 255, 0.1)';
            betBtn.style.color = 'rgba(255, 255, 255, 0.4)';
            betBtn.style.boxShadow = 'none';
            betBtn.style.cursor = 'not-allowed';
            
            withdrawBtn.disabled = true;
            withdrawBtn.style.background = 'rgba(255, 255, 255, 0.1)';
            withdrawBtn.style.color = 'rgba(255, 255, 255, 0.4)';
            withdrawBtn.style.boxShadow = 'none';
            withdrawBtn.style.cursor = 'not-allowed';
        }
    }
    
    // –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
    placeBet() {
        if (this.gameState !== 'waiting' && this.gameState !== 'countdown') {
            console.log('‚ùå –°—Ç–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã');
            return;
        }
        
        const betAmount = document.getElementById('crashBetAmount')?.value;
        const autoWithdrawValue = document.getElementById('autoWithdraw')?.value;
        const autoWithdrawEnabled = document.getElementById('autoWithdrawEnabled')?.checked;
        
        if (!betAmount || betAmount < 50) {
            console.log('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 50 –∑–≤–µ–∑–¥');
            return;
        }
        
        this.playerBet = {
            amount: parseInt(betAmount)
        };
        
        this.autoWithdraw = autoWithdrawEnabled;
        this.autoWithdrawAt = parseFloat(autoWithdrawValue) || 2.0;
        
        console.log(`‚úÖ –°–¢–ê–í–ö–ê: ${betAmount}‚≠ê`);
        if (this.autoWithdraw) {
            console.log(`ü§ñ –ê–í–¢–û–í–´–í–û–î –ê–ö–¢–ò–í–ï–ù –Ω–∞ ${this.autoWithdrawAt}x`);
        } else {
            console.log(`üî¥ –ê–≤—Ç–æ–≤—ã–≤–æ–¥ –û–¢–ö–õ–Æ–ß–ï–ù`);
        }
        
        this.updateButtons();
    }
    
    // –ó–∞–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É
    withdrawBet() {
        if (!this.playerBet) {
            console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏');
            return;
        }
        
        const winAmount = Math.floor(this.playerBet.amount * this.multiplier);
        console.log(`üéâ –í–´–ò–ì–†–´–®: ${winAmount} –∑–≤–µ–∑–¥ (${this.multiplier.toFixed(2)}x)`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
        const statusEl = document.getElementById('crashStatus');
        if (statusEl) {
            statusEl.textContent = `üí∞ –í—ã–∏–≥—Ä—ã—à ${winAmount}‚≠ê (${this.multiplier.toFixed(2)}x)`;
            statusEl.style.color = '#4caf50';
        }
        
        this.playerBet = null;
        this.autoWithdraw = false;
        this.updateButtons();
        
        // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –∂–¥–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        setTimeout(() => {
            this.waitingPhase();
        }, 2000);
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
    createExplosion() {
        const container = document.getElementById('crashStarContainer');
        if (!container) return;
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤–∑—Ä—ã–≤–∞
        for (let i = 0; i < 12; i++) {
            const particle = document.createElement('div');
            particle.className = 'explosion-particle';
            
            const angle = (i / 12) * 360;
            const distance = 50 + Math.random() * 30;
            
            particle.style.left = '50%';
            particle.style.top = '50%';
            particle.style.transform = `translate(-50%, -50%)`;
            particle.style.background = i % 2 === 0 ? '#fbbf24' : '#ef4444';
            
            container.appendChild(particle);
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—Ü—É
            setTimeout(() => {
                particle.style.transform = `translate(${Math.cos(angle * Math.PI / 180) * distance}px, ${Math.sin(angle * Math.PI / 180) * distance}px)`;
                particle.style.opacity = '0';
                particle.style.transition = 'all 0.8s ease-out';
            }, 10);
            
            // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—É
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 1000);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener('DOMContentLoaded', () => {
    window.crashGame = new CrashGame();
});

// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—à –∫—Ä–∞—à —Å –Ω—É–ª—è